"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var _react = _interopRequireDefault(require("react"));

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _mathjax = _interopRequireDefault(require("@nteract/mathjax"));

var _remarkMath = _interopRequireDefault(require("./remark-math"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var math = function math(props) {
  return _react.default.createElement(_mathjax.default.Node, null, props.value);
};

var inlineMath = function inlineMath(props) {
  return _react.default.createElement(_mathjax.default.Node, {
    inline: true
  }, props.value);
};

var MarkdownRender = function MarkdownRender(props, context) {
  var newProps = (0, _objectSpread2.default)({}, props, {
    escapeHtml: false,
    plugins: [_remarkMath.default],
    renderers: (0, _objectSpread2.default)({}, props.renderers, {
      math: math,
      inlineMath: inlineMath
    })
  }); // Render a Context if one was not passed as a parent

  if (!context.MathJaxContext) {
    return _react.default.createElement(_mathjax.default.Context, {
      input: "tex"
    }, _react.default.createElement(_reactMarkdown.default, newProps));
  }

  return _react.default.createElement(_reactMarkdown.default, newProps);
};

MarkdownRender.contextTypes = {
  // Opt in to updates to the MathJax object even though
  // Not explicitly used
  MathJax: _propTypes.default.object,
  MathJaxContext: _propTypes.default.bool
};
var _default = MarkdownRender;
exports.default = _default;