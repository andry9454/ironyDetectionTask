"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NotebookPreview = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var Immutable = _interopRequireWildcard(require("immutable"));

var _displayArea = require("@nteract/display-area");

var _transforms = require("@nteract/transforms");

var _commutable = require("@nteract/commutable");

var _presentationalComponents = require("@nteract/presentational-components");

var _papermill = require("./papermill");

var _markdown = _interopRequireDefault(require("@nteract/markdown"));

var _mathjax = _interopRequireDefault(require("@nteract/mathjax"));

var NotebookPreview =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2.default)(NotebookPreview, _React$PureComponent);

  function NotebookPreview(props) {
    var _this;

    (0, _classCallCheck2.default)(this, NotebookPreview);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NotebookPreview).call(this, props));
    _this.state = {
      notebook: (0, _commutable.fromJS)(props.notebook)
    };
    return _this;
  }

  (0, _createClass2.default)(NotebookPreview, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.notebook !== this.props.notebook) {
        this.setState({
          notebook: (0, _commutable.fromJS)(nextProps.notebook)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // TODO: Rely on setState to convert notebook from plain JS to commutable format
      var notebook = this.state.notebook; // Propagated from the hide_(all)_input nbextension

      var allSourceHidden = notebook.getIn(["metadata", "hide_input"], false);
      var language = notebook.getIn(["metadata", "language_info", "codemirror_mode", "name"], notebook.getIn(["metadata", "language_info", "codemirror_mode"], notebook.getIn(["metadata", "language_info", "name"], "text")));
      var cellOrder = notebook.get("cellOrder");
      var cellMap = notebook.get("cellMap");
      return React.createElement(_mathjax.default.Context, null, React.createElement("div", {
        className: "notebook-preview"
      }, React.createElement(_presentationalComponents.Cells, null, cellOrder.map(function (cellID) {
        var cell = cellMap.get(cellID);
        var cellType = cell.get("cell_type");
        var source = cell.get("source");

        switch (cellType) {
          case "code":
            var sourceHidden = allSourceHidden || cell.getIn(["metadata", "inputHidden"]) || cell.getIn(["metadata", "hide_input"]);
            var outputHidden = cell.get("outputs").size === 0 || cell.getIn(["metadata", "outputHidden"]);
            var papermillStatus = cell.getIn(["metadata", "papermill", "status"], null);
            return React.createElement(_presentationalComponents.Cell, {
              key: cellID
            }, React.createElement(_papermill.PapermillView, {
              status: papermillStatus
            }), React.createElement(_presentationalComponents.Input, {
              hidden: sourceHidden
            }, React.createElement(_presentationalComponents.Prompt, {
              counter: cell.get("execution_count"),
              running: papermillStatus === "running"
            }), React.createElement(_presentationalComponents.Source, {
              language: language,
              theme: _this2.props.theme
            }, source)), React.createElement(_presentationalComponents.Outputs, {
              hidden: outputHidden,
              expanded: cell.getIn(["metadata", "outputExpanded"], true)
            }, React.createElement(_displayArea.Display, {
              outputs: cell.get("outputs").toJS(),
              transforms: _this2.props.transforms,
              displayOrder: _this2.props.displayOrder
            })));

          case "markdown":
            return React.createElement(_presentationalComponents.Cell, {
              key: cellID
            }, React.createElement("div", {
              className: "jsx-2513275823" + " " + "content-margin"
            }, React.createElement(_markdown.default, {
              source: source
            })), React.createElement(_style.default, {
              styleId: "2513275823",
              css: ".content-margin.jsx-2513275823{padding-left:calc(var(--prompt-width,50px) + 10px);padding-top:10px;padding-bottom:10px;padding-right:10px;}"
            }));

          case "raw":
            return React.createElement(_presentationalComponents.Cell, {
              key: cellID
            }, React.createElement("pre", {
              className: "jsx-1171811947" + " " + "raw-cell"
            }, source, React.createElement(_style.default, {
              styleId: "1171811947",
              css: "raw-cell.jsx-1171811947{background:repeating-linear-gradient( -45deg, transparent, transparent 10px, #efefef 10px, #f1f1f1 20px );}"
            })));

          default:
            return React.createElement(_presentationalComponents.Cell, {
              key: cellID
            }, React.createElement(_presentationalComponents.Outputs, null, React.createElement("pre", null, "Cell Type \"".concat(cellType, "\" is not implemented"))));
        }
      })), React.createElement("style", null, ":root {\n          ".concat(_presentationalComponents.themes[this.props.theme], "\n            --theme-cell-shadow-hover: none;\n            --theme-cell-shadow-focus: none;\n            --theme-cell-prompt-bg-hover: var(--theme-cell-prompt-bg);\n            --theme-cell-prompt-bg-focus: var(--theme-cell-prompt-bg);\n            --theme-cell-prompt-fg-hover: var(--theme-cell-prompt-fg);\n            --theme-cell-prompt-fg-focus: var(--theme-cell-prompt-fg);\n          }\n        "))));
    }
  }]);
  return NotebookPreview;
}(React.PureComponent);

exports.NotebookPreview = NotebookPreview;
(0, _defineProperty2.default)(NotebookPreview, "defaultProps", {
  displayOrder: _transforms.displayOrder,
  transforms: _transforms.transforms,
  notebook: (0, _commutable.appendCellToNotebook)(_commutable.emptyNotebook, (0, _commutable.createCodeCell)().set("source", "# where's the content?")),
  theme: "light"
});
var _default = NotebookPreview;
exports.default = _default;