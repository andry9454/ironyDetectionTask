"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _syntaxHighlighter = _interopRequireDefault(require("../syntax-highlighter"));

var Source =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Source, _React$Component);

  function Source() {
    (0, _classCallCheck2.default)(this, Source);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Source).apply(this, arguments));
  }

  (0, _createClass2.default)(Source, [{
    key: "render",
    value: function render() {
      // Build in a default renderer when they pass a plain string
      // This is primarily for use with non-editable contexts (notebook-preview)
      // to make rendering much faster (compared to codemirror)
      // Ref: https://github.com/nteract/notebook-preview/issues/20
      if (typeof this.props.children === "string") {
        return React.createElement(_syntaxHighlighter.default, {
          language: this.props.language,
          className: this.props.className
        }, this.props.children);
      } // Otherwise assume they have their own editor component


      return React.createElement("div", {
        className: "input"
      }, this.props.children);
    }
  }]);
  return Source;
}(React.Component);

exports.Source = Source;
(0, _defineProperty2.default)(Source, "defaultProps", {
  children: "",
  language: "text",
  className: "input",
  theme: "light"
});